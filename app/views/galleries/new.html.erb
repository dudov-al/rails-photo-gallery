<% content_for :title, "Create New Gallery" %>
<% content_for :description, "Create a new photo gallery to showcase your work" %>

<div class="skip-link">
  <a href="#main-content">Skip to main content</a>
</div>

<main id="main-content" class="gallery-page">
  <div class="container py-4">
    <!-- Header -->
    <header class="gallery-header mb-4">
      <div class="d-flex align-items-center justify-content-between">
        <div>
          <h1 class="h3 mb-1">Create New Gallery</h1>
          <p class="text-muted mb-0">
            Set up a new photo gallery to showcase your work
          </p>
        </div>
        <div class="gallery-actions">
          <%= link_to galleries_path, 
              class: "btn btn-outline-secondary",
              data: { bs_toggle: "tooltip", title: "Back to galleries" } do %>
            <svg class="me-2" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
              <path d="M19 12H5"/>
              <polyline points="12,19 5,12 12,5"/>
            </svg>
            Back to Galleries
          <% end %>
        </div>
      </div>
    </header>

    <div class="row">
      <!-- Main Form -->
      <div class="col-lg-8">
        <div class="card">
          <div class="card-header">
            <div class="d-flex align-items-center">
              <svg class="me-2" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                <rect x="3" y="3" width="18" height="18" rx="2"/>
                <circle cx="9" cy="9" r="2"/>
                <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
              </svg>
              <h5 class="card-title mb-0">Gallery Details</h5>
            </div>
          </div>
          <div class="card-body">
            <%= render 'form' %>
          </div>
        </div>
      </div>

      <!-- Sidebar -->
      <div class="col-lg-4">
        <!-- Tips Card -->
        <div class="card mb-4">
          <div class="card-header">
            <div class="d-flex align-items-center">
              <svg class="me-2" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                <circle cx="12" cy="12" r="10"/>
                <path d="M12 6h.01"/>
                <path d="M12 12v6"/>
              </svg>
              <h6 class="card-title mb-0">Gallery Creation Tips</h6>
            </div>
          </div>
          <div class="card-body">
            <div class="tips-list">
              <div class="tip-item mb-3">
                <div class="tip-icon text-primary mb-2">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M3 6h18"/>
                    <path d="M3 12h18"/>
                    <path d="M3 18h18"/>
                  </svg>
                </div>
                <h6 class="tip-title">Choose Descriptive Titles</h6>
                <p class="tip-description small text-muted mb-0">
                  Use clear, descriptive titles that help viewers understand the gallery's content
                </p>
              </div>
              
              <div class="tip-item mb-3">
                <div class="tip-icon text-success mb-2">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M9 12l2 2 4-4"/>
                    <circle cx="12" cy="12" r="10"/>
                  </svg>
                </div>
                <h6 class="tip-title">Start as Draft</h6>
                <p class="tip-description small text-muted mb-0">
                  Keep galleries unpublished while you're adding and organizing images
                </p>
              </div>
              
              <div class="tip-item mb-3">
                <div class="tip-icon text-warning mb-2">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                  </svg>
                </div>
                <h6 class="tip-title">Password Protection</h6>
                <p class="tip-description small text-muted mb-0">
                  Use strong passwords for client galleries or private collections
                </p>
              </div>
              
              <div class="tip-item">
                <div class="tip-icon text-info mb-2">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <circle cx="12" cy="12" r="10"/>
                    <polyline points="12,6 12,12 16,14"/>
                  </svg>
                </div>
                <h6 class="tip-title">Expiration Dates</h6>
                <p class="tip-description small text-muted mb-0">
                  Set expiration dates for time-sensitive galleries like client proofs
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions Card -->
        <div class="card">
          <div class="card-header">
            <div class="d-flex align-items-center">
              <svg class="me-2" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                <polyline points="9,11 12,14 22,4"/>
                <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"/>
              </svg>
              <h6 class="card-title mb-0">Quick Actions</h6>
            </div>
          </div>
          <div class="card-body">
            <div class="d-grid gap-2">
              <small class="text-muted mb-2">After creating your gallery:</small>
              
              <div class="quick-action-item">
                <svg class="me-2" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/>
                  <circle cx="12" cy="13" r="3"/>
                </svg>
                <span class="small">Add images to your gallery</span>
              </div>
              
              <div class="quick-action-item">
                <svg class="me-2" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M15 3h6v6"/>
                  <path d="M10 14 21 3"/>
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                </svg>
                <span class="small">Organize and reorder images</span>
              </div>
              
              <div class="quick-action-item">
                <svg class="me-2" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
                  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.72-1.71"/>
                </svg>
                <span class="small">Share your gallery link</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- JavaScript for enhanced functionality -->
<script nonce="<%= content_security_policy_nonce %>">
// Gallery form controller functionality
class GalleryFormController {
  static targets = ["passwordFields", "expirationFields"]
  
  connect() {
    this.setupEnhancedFeatures()
  }
  
  togglePasswordProtection(event) {
    const passwordFields = document.querySelector('[data-gallery-form-target="passwordFields"]')
    const isEnabled = event.target.checked
    
    if (passwordFields) {
      passwordFields.style.display = isEnabled ? 'block' : 'none'
      
      // Clear password fields if disabling
      if (!isEnabled) {
        const passwordInputs = passwordFields.querySelectorAll('input[type="password"]')
        passwordInputs.forEach(input => {
          input.value = ''
          input.classList.remove('is-invalid', 'is-valid')
        })
      } else {
        // Focus on password field when enabled
        const firstPasswordInput = passwordFields.querySelector('input[type="password"]')
        if (firstPasswordInput) {
          setTimeout(() => firstPasswordInput.focus(), 100)
        }
      }
    }
  }
  
  toggleExpiration(event) {
    const expirationFields = document.querySelector('[data-gallery-form-target="expirationFields"]')
    const isEnabled = event.target.checked
    
    if (expirationFields) {
      expirationFields.style.display = isEnabled ? 'block' : 'none'
      
      if (!isEnabled) {
        const dateInput = expirationFields.querySelector('input[type="datetime-local"]')
        if (dateInput) {
          dateInput.value = ''
          dateInput.classList.remove('is-invalid', 'is-valid')
        }
      } else {
        // Set default date to 30 days from now
        const dateInput = expirationFields.querySelector('input[type="datetime-local"]')
        if (dateInput && !dateInput.value) {
          const futureDate = new Date()
          futureDate.setDate(futureDate.getDate() + 30)
          dateInput.value = futureDate.toISOString().slice(0, 16)
        }
        setTimeout(() => dateInput.focus(), 100)
      }
    }
  }
  
  togglePublishedState(event) {
    const isPublished = event.target.checked
    const form = event.target.closest('form')
    
    if (isPublished) {
      // Show a subtle notification about publishing
      this.showPublishNotification()
    }
  }
  
  showPublishNotification() {
    // Create a temporary notification
    const notification = document.createElement('div')
    notification.className = 'alert alert-info alert-dismissible fade show'
    notification.innerHTML = `
      <div class="d-flex align-items-center">
        <svg class="me-2" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <circle cx="12" cy="12" r="10"/>
          <path d="M12 6h.01"/>
          <path d="M12 12v6"/>
        </svg>
        <div>
          <strong>Publishing Gallery:</strong> This gallery will be viewable by anyone with the link.
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    `
    
    const form = document.querySelector('.gallery-form')
    form.insertBefore(notification, form.firstChild)
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.classList.remove('show')
        setTimeout(() => notification.remove(), 150)
      }
    }, 5000)
  }
  
  setupEnhancedFeatures() {
    // Auto-resize description textarea
    const descriptionField = document.querySelector('textarea[name="gallery[description]"]')
    if (descriptionField) {
      descriptionField.addEventListener('input', function() {
        this.style.height = 'auto'
        this.style.height = Math.min(this.scrollHeight, 200) + 'px'
      })
    }
    
    // Initialize tooltips
    const tooltipElements = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    tooltipElements.forEach(element => {
      new bootstrap.Tooltip(element)
    })
    
    // Form auto-save (draft functionality)
    this.setupAutoSave()
  }
  
  setupAutoSave() {
    const form = document.querySelector('.gallery-form')
    if (!form) return
    
    let saveTimeout
    const inputs = form.querySelectorAll('input, textarea, select')
    
    inputs.forEach(input => {
      input.addEventListener('input', () => {
        clearTimeout(saveTimeout)
        saveTimeout = setTimeout(() => {
          this.saveFormDraft()
        }, 2000) // Save after 2 seconds of no changes
      })
    })
  }
  
  saveFormDraft() {
    const form = document.querySelector('.gallery-form')
    const formData = new FormData(form)
    const draftData = Object.fromEntries(formData.entries())
    
    // Save to localStorage
    localStorage.setItem('gallery_draft', JSON.stringify(draftData))
    
    // Show subtle save indicator
    this.showSaveIndicator()
  }
  
  showSaveIndicator() {
    let indicator = document.querySelector('.save-indicator')
    if (!indicator) {
      indicator = document.createElement('div')
      indicator.className = 'save-indicator'
      indicator.innerHTML = `
        <small class="text-muted">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
            <polyline points="17,21 17,13 7,13 7,21"/>
            <polyline points="7,3 7,8 15,8"/>
          </svg>
          Draft saved
        </small>
      `
      indicator.style.cssText = `
        position: fixed; 
        top: 20px; 
        right: 20px; 
        background: rgba(40, 167, 69, 0.1); 
        padding: 8px 12px; 
        border-radius: 4px; 
        border: 1px solid rgba(40, 167, 69, 0.2);
        transition: opacity 0.3s;
        z-index: 1000;
      `
      document.body.appendChild(indicator)
    }
    
    indicator.style.opacity = '1'
    setTimeout(() => {
      indicator.style.opacity = '0'
    }, 2000)
  }
}

// Initialize the controller
document.addEventListener('DOMContentLoaded', function() {
  const galleryForm = document.querySelector('.gallery-form')
  if (galleryForm) {
    const controller = new GalleryFormController()
    
    // Bind event listeners
    document.getElementById('enable-password')?.addEventListener('change', 
      controller.togglePasswordProtection.bind(controller))
    document.getElementById('enable-expiration')?.addEventListener('change', 
      controller.toggleExpiration.bind(controller))
    document.querySelector('input[name="gallery[published]"]')?.addEventListener('change', 
      controller.togglePublishedState.bind(controller))
    
    controller.connect()
  }
})
</script>

<style nonce="<%= content_security_policy_nonce %>">
/* Gallery page specific styles */
.gallery-page {
  background-color: #f8f9fa;
  min-height: 100vh;
}

.gallery-header {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.gallery-actions svg {
  width: 16px;
  height: 16px;
}

/* Tips styling */
.tips-list .tip-item {
  padding-left: 0.5rem;
  border-left: 3px solid transparent;
  transition: border-color 0.2s;
}

.tips-list .tip-item:hover {
  border-left-color: #007bff;
}

.tip-icon {
  display: inline-block;
}

.tip-title {
  font-size: 0.9rem;
  margin-bottom: 0.25rem;
  font-weight: 600;
}

/* Quick actions styling */
.quick-action-item {
  display: flex;
  align-items: center;
  padding: 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.quick-action-item:hover {
  background-color: #f8f9fa;
}

.quick-action-item svg {
  flex-shrink: 0;
  opacity: 0.7;
}

/* Enhanced card styling */
.card {
  border: none;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  border-radius: 8px;
}

.card-header {
  background: #f8f9fa;
  border-bottom: 1px solid #e9ecef;
  border-radius: 8px 8px 0 0;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .gallery-header {
    padding: 1rem;
  }
  
  .gallery-header .d-flex {
    flex-direction: column;
    align-items: flex-start !important;
    gap: 1rem;
  }
  
  .gallery-actions {
    width: 100%;
  }
  
  .gallery-actions .btn {
    width: 100%;
    justify-content: center;
  }
}
</style>