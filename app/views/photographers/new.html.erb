<% content_for :title, "Create Photographer Account" %>
<% content_for :description, "Join Photograph to manage your professional photo galleries" %>

<div class="skip-link">
  <a href="#main-content">Skip to main content</a>
</div>

<main id="main-content" class="auth-page">
  <div class="auth-container">
    <div class="auth-card" data-controller="auth-form">
      <!-- Header -->
      <header class="auth-header">
        <div class="auth-brand">
          <svg class="auth-logo" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
            <path d="m9 9 3-3 3 3"/>
            <path d="m9 15 3-3 3 3"/>
            <rect x="3" y="3" width="18" height="18" rx="2"/>
          </svg>
          <h1 class="auth-title">Create Your Account</h1>
        </div>
        <p class="auth-subtitle">
          Join Photograph and start showcasing your photography
        </p>
      </header>

      <!-- Registration Form -->
      <%= form_with model: @photographer, 
                    url: register_path, 
                    local: true, 
                    class: "auth-form",
                    data: { 
                      auth_form_target: "form",
                      action: "submit->auth-form#handleSubmit" 
                    },
                    novalidate: true do |form| %>
        
        <div class="form-group">
          <%= form.label :name, "Full Name", class: "form-label" %>
          <%= form.text_field :name, 
              class: "form-control #{'is-invalid' if @photographer&.errors&.[](:name)&.present?}",
              placeholder: "John Smith",
              required: true,
              autocomplete: "name",
              data: { 
                auth_form_target: "nameField",
                action: "input->auth-form#clearFieldError"
              },
              aria: { 
                describedby: @photographer&.errors&.[](:name)&.present? ? "name-error" : nil
              } %>
          <% if @photographer&.errors&.[](:name)&.present? %>
            <div class="invalid-feedback" id="name-error" role="alert" aria-live="polite">
              <%= @photographer.errors[:name].first %>
            </div>
          <% end %>
        </div>
        
        <div class="form-group">
          <%= form.label :email, "Email Address", class: "form-label" %>
          <%= form.email_field :email, 
              class: "form-control #{'is-invalid' if @photographer&.errors&.[](:email)&.present?}",
              placeholder: "photographer@example.com",
              required: true,
              autocomplete: "username",
              data: { 
                auth_form_target: "emailField",
                action: "input->auth-form#clearFieldError"
              },
              aria: { 
                describedby: @photographer&.errors&.[](:email)&.present? ? "email-error" : nil
              } %>
          <% if @photographer&.errors&.[](:email)&.present? %>
            <div class="invalid-feedback" id="email-error" role="alert" aria-live="polite">
              <%= @photographer.errors[:email].first %>
            </div>
          <% end %>
        </div>
        
        <div class="form-group">
          <%= form.label :password, "Password", class: "form-label" %>
          <div class="password-field">
            <%= form.password_field :password, 
                class: "form-control #{'is-invalid' if @photographer&.errors&.[](:password)&.present?}",
                placeholder: "Create a secure password",
                required: true,
                autocomplete: "new-password",
                data: { 
                  auth_form_target: "passwordField",
                  action: "input->auth-form#clearFieldError input->auth-form#checkPasswordStrength"
                },
                aria: { 
                  describedby: @photographer&.errors&.[](:password)&.present? ? "password-error" : "password-help"
                } %>
            <button type="button" 
                    class="password-toggle"
                    data-action="click->auth-form#togglePasswordVisibility"
                    data-auth-form-target="passwordToggle"
                    aria-label="Toggle password visibility"
                    tabindex="-1">
              <svg class="password-toggle-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
            </button>
          </div>
          <% if @photographer&.errors&.[](:password)&.present? %>
            <div class="invalid-feedback" id="password-error" role="alert" aria-live="polite">
              <%= @photographer.errors[:password].first %>
            </div>
          <% else %>
            <div class="form-text" id="password-help">
              Password must be at least 8 characters with uppercase, lowercase, and number
            </div>
          <% end %>
          
          <!-- Password Strength Indicator -->
          <div class="password-strength" data-auth-form-target="passwordStrength" style="display: none;">
            <div class="password-strength-bar">
              <div class="password-strength-fill" data-auth-form-target="passwordStrengthFill"></div>
            </div>
            <small class="password-strength-text" data-auth-form-target="passwordStrengthText"></small>
          </div>
        </div>
        
        <div class="form-group">
          <%= form.label :password_confirmation, "Confirm Password", class: "form-label" %>
          <div class="password-field">
            <%= form.password_field :password_confirmation, 
                class: "form-control #{'is-invalid' if @photographer&.errors&.[](:password_confirmation)&.present?}",
                placeholder: "Re-enter your password",
                required: true,
                autocomplete: "new-password",
                data: { 
                  auth_form_target: "passwordConfirmationField",
                  action: "input->auth-form#clearFieldError input->auth-form#checkPasswordMatch"
                },
                aria: { 
                  describedby: @photographer&.errors&.[](:password_confirmation)&.present? ? "password-confirmation-error" : nil
                } %>
            <button type="button" 
                    class="password-toggle"
                    data-action="click->auth-form#togglePasswordVisibility"
                    data-auth-form-target="passwordConfirmationToggle"
                    aria-label="Toggle password confirmation visibility"
                    tabindex="-1">
              <svg class="password-toggle-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
            </button>
          </div>
          <% if @photographer&.errors&.[](:password_confirmation)&.present? %>
            <div class="invalid-feedback" id="password-confirmation-error" role="alert" aria-live="polite">
              <%= @photographer.errors[:password_confirmation].first %>
            </div>
          <% end %>
        </div>

        <div class="form-group form-check-group">
          <label class="form-check">
            <input type="checkbox" 
                   class="form-check-input" 
                   id="terms-agreement"
                   required
                   data-auth-form-target="termsAgreement">
            <span class="form-check-label">
              I agree to the <a href="#" class="auth-link">Terms of Service</a> and 
              <a href="#" class="auth-link">Privacy Policy</a>
            </span>
          </label>
        </div>
        
        <!-- Loading and Error States -->
        <div class="auth-alerts" data-auth-form-target="alerts" role="alert" aria-live="assertive"></div>
        
        <div class="form-actions">
          <%= form.submit "Create Account", 
              class: "btn btn-primary btn-full",
              data: { 
                auth_form_target: "submitButton",
                disable_with: "Creating account..."
              } %>
        </div>
      <% end %>
      
      <!-- Alternative Actions -->
      <div class="auth-divider">
        <span>Already have an account?</span>
      </div>
      
      <div class="auth-actions">
        <%= link_to "Sign In", login_path, 
            class: "btn btn-outline btn-full" %>
      </div>
    </div>
    
    <!-- Security Notice -->
    <div class="auth-security-notice" role="complementary" aria-label="Security information">
      <div class="security-icon" aria-hidden="true">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
          <path d="M9 12l2 2 4-4"/>
        </svg>
      </div>
      <div class="security-text">
        <p class="security-title">Secure Registration</p>
        <p class="security-description">
          Your account information is encrypted and secure. We use industry-standard 
          security measures to protect your data and photography.
        </p>
      </div>
    </div>
  </div>
</main>

<script nonce="<%= content_security_policy_nonce %>">
document.addEventListener('DOMContentLoaded', function() {
  // Password strength checker
  const passwordField = document.querySelector('[data-auth-form-target="passwordField"]');
  const confirmationField = document.querySelector('[data-auth-form-target="passwordConfirmationField"]');
  const strengthIndicator = document.querySelector('[data-auth-form-target="passwordStrength"]');
  const strengthFill = document.querySelector('[data-auth-form-target="passwordStrengthFill"]');
  const strengthText = document.querySelector('[data-auth-form-target="passwordStrengthText"]');
  
  if (passwordField && strengthIndicator) {
    passwordField.addEventListener('input', function() {
      const password = this.value;
      const strength = calculatePasswordStrength(password);
      
      if (password.length > 0) {
        strengthIndicator.style.display = 'block';
        updateStrengthDisplay(strength);
      } else {
        strengthIndicator.style.display = 'none';
      }
    });
  }
  
  function calculatePasswordStrength(password) {
    let score = 0;
    const checks = {
      length: password.length >= 8,
      lowercase: /[a-z]/.test(password),
      uppercase: /[A-Z]/.test(password),
      number: /\d/.test(password),
      special: /[^a-zA-Z\d]/.test(password),
      longLength: password.length >= 12
    };
    
    Object.values(checks).forEach(check => {
      if (check) score++;
    });
    
    return {
      score: score,
      checks: checks
    };
  }
  
  function updateStrengthDisplay(strength) {
    const percentage = (strength.score / 6) * 100;
    let level = 'weak';
    let color = '#e74c3c';
    
    if (strength.score >= 4) {
      level = 'strong';
      color = '#27ae60';
    } else if (strength.score >= 3) {
      level = 'good';
      color = '#f39c12';
    }
    
    if (strengthFill) {
      strengthFill.style.width = percentage + '%';
      strengthFill.style.backgroundColor = color;
    }
    
    if (strengthText) {
      strengthText.textContent = `Password strength: ${level}`;
      strengthText.style.color = color;
    }
  }
  
  // Password confirmation matching
  if (confirmationField && passwordField) {
    confirmationField.addEventListener('input', function() {
      const password = passwordField.value;
      const confirmation = this.value;
      
      if (confirmation.length > 0) {
        if (password === confirmation) {
          this.classList.remove('is-invalid');
          this.classList.add('is-valid');
        } else {
          this.classList.remove('is-valid');
          this.classList.add('is-invalid');
        }
      } else {
        this.classList.remove('is-valid', 'is-invalid');
      }
    });
  }
  
  // Form validation
  const form = document.querySelector('.auth-form');
  if (form) {
    form.addEventListener('submit', function(event) {
      const termsCheckbox = document.getElementById('terms-agreement');
      
      if (!form.checkValidity() || !termsCheckbox.checked) {
        event.preventDefault();
        event.stopPropagation();
        
        if (!termsCheckbox.checked) {
          termsCheckbox.closest('.form-check').classList.add('is-invalid');
        }
      }
      
      form.classList.add('was-validated');
    });
  }
  
  // Rate limiting warning
  let attemptCount = 0;
  form?.addEventListener('submit', function() {
    attemptCount++;
    if (attemptCount >= 3) {
      const submitBtn = form.querySelector('input[type="submit"]');
      if (submitBtn) {
        submitBtn.disabled = true;
        setTimeout(() => {
          submitBtn.disabled = false;
        }, 10000); // 10 second delay for registration attempts
      }
    }
  });
});
</script>

<style nonce="<%= content_security_policy_nonce %>">
/* Additional styles for registration form */
.password-strength {
  margin-top: 0.5rem;
}

.password-strength-bar {
  height: 4px;
  background-color: #e9ecef;
  border-radius: 2px;
  overflow: hidden;
  margin-bottom: 0.25rem;
}

.password-strength-fill {
  height: 100%;
  width: 0%;
  transition: width 0.3s ease, background-color 0.3s ease;
}

.password-strength-text {
  font-size: 0.75rem;
  font-weight: 500;
}

.form-check.is-invalid .form-check-label {
  color: #dc3545;
}

.form-check.is-invalid .form-check-input {
  border-color: #dc3545;
}

.auth-link {
  color: var(--link-color);
  text-decoration: none;
}

.auth-link:hover {
  color: var(--link-hover);
  text-decoration: underline;
}

.password-field {
  position: relative;
}

.password-toggle {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  padding: 5px;
  cursor: pointer;
  color: var(--text-gray);
}

.password-toggle:hover {
  color: var(--dark-gray);
}

.password-toggle-icon {
  width: 18px;
  height: 18px;
}
</style>