# ===========================================
# Simplified Production Docker Compose Configuration
# ===========================================
version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:15.4-alpine
    container_name: photograph_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: photograph_production
      POSTGRES_USER: photograph
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - photograph_backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photograph -d photograph_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: photograph_redis_prod
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - photograph_backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Rails Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: production
    image: photograph:${IMAGE_TAG:-latest}
    container_name: photograph_app_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD}@db:5432/photograph_production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      RAILS_ENV: production
      RACK_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      PHOTOGRAPH_HOST: ${PHOTOGRAPH_HOST}
      PHOTOGRAPH_PROTOCOL: ${PHOTOGRAPH_PROTOCOL:-https}
      RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-10}
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-2}
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - app_tmp:/app/tmp
    networks:
      - photograph_frontend
      - photograph_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Sidekiq Background Jobs
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: production
    image: photograph:${IMAGE_TAG:-latest}
    container_name: photograph_sidekiq_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD}@db:5432/photograph_production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      RAILS_ENV: production
      RACK_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      PHOTOGRAPH_HOST: ${PHOTOGRAPH_HOST}
      PHOTOGRAPH_PROTOCOL: ${PHOTOGRAPH_PROTOCOL:-https}
      SIDEKIQ_CONCURRENCY: ${SIDEKIQ_CONCURRENCY:-10}
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - app_tmp:/app/tmp
    networks:
      - photograph_backend
    command: ["bundle", "exec", "sidekiq"]

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: photograph_nginx_prod
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - app_storage:/app/storage:ro
    networks:
      - photograph_frontend
    environment:
      - DOMAIN=${PHOTOGRAPH_HOST}

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_logs:
    driver: local
  app_tmp:
    driver: local

# Networks
networks:
  photograph_frontend:
    driver: bridge
  photograph_backend:
    driver: bridge