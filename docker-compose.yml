# ===========================================
# Development Docker Compose Configuration
# ===========================================
version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:15.4-alpine
    container_name: photograph_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: photograph_development
      POSTGRES_USER: photograph
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-dev_password_123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./docker/postgres/init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - photograph_network
    ports:
      - "5432:5432"  # Expose for development access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photograph -d photograph_development"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7.2-alpine
    container_name: photograph_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_123}
    volumes:
      - redis_data_dev:/data
    networks:
      - photograph_network
    ports:
      - "6379:6379"  # Expose for development access
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Rails Application (Development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: photograph_app_dev
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD:-dev_password_123}@db:5432/photograph_development
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_123}@redis:6379/0
      RAILS_ENV: development
      RACK_ENV: development
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-development_secret_key_base_not_for_production}
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      # Development specific
      PHOTOGRAPH_HOST: ${PHOTOGRAPH_HOST:-localhost}
      PHOTOGRAPH_PROTOCOL: ${PHOTOGRAPH_PROTOCOL:-http}
      # Enable debugging
      RAILS_MAX_THREADS: "1"
      WEB_CONCURRENCY: "1"
    volumes:
      - app_storage_dev:/app/storage
      - app_logs_dev:/app/log
      - app_tmp_dev:/app/tmp
      # Mount source code for development
      - .:/app:cached
      - bundle_cache:/usr/local/bundle
    networks:
      - photograph_network
    ports:
      - "3000:3000"
    command: >
      sh -c "
        echo 'Installing/updating gems...' &&
        bundle install &&
        echo 'Setting up database...' &&
        bundle exec rails db:create db:migrate db:seed &&
        echo 'Starting development server...' &&
        bundle exec rails server -b 0.0.0.0
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Sidekiq Background Jobs (Development)
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: photograph_sidekiq_dev
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD:-dev_password_123}@db:5432/photograph_development
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_123}@redis:6379/0
      RAILS_ENV: development
      RACK_ENV: development
      SECRET_KEY_BASE: ${SECRET_KEY_BASE:-development_secret_key_base_not_for_production}
      SIDEKIQ_CONCURRENCY: ${SIDEKIQ_CONCURRENCY:-2}
    volumes:
      - app_storage_dev:/app/storage
      - app_logs_dev:/app/log
      - app_tmp_dev:/app/tmp
      - .:/app:cached
      - bundle_cache:/usr/local/bundle
    networks:
      - photograph_network
    command: >
      sh -c "
        bundle install &&
        bundle exec sidekiq -C config/sidekiq.yml
      "
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional Nginx for development (uncomment if needed)
  # nginx:
  #   image: nginx:1.25-alpine
  #   container_name: photograph_nginx_dev
  #   restart: unless-stopped
  #   depends_on:
  #     app:
  #       condition: service_healthy
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
  #     - app_storage_dev:/app/storage:ro
  #   networks:
  #     - photograph_network

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  app_storage_dev:
    driver: local
  app_logs_dev:
    driver: local
  app_tmp_dev:
    driver: local
  bundle_cache:
    driver: local

networks:
  photograph_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16