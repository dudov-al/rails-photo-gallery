version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: photograph_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: photograph_production
      POSTGRES_USER: photograph
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - photograph_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photograph -d photograph_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: photograph_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - photograph_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Rails Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: photograph_app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD:-secure_password_change_me}@db:5432/photograph_production
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      RAILS_ENV: production
      RACK_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_SERVE_STATIC_FILES: "true"
      RAILS_LOG_TO_STDOUT: "true"
      # Application specific
      PHOTOGRAPH_HOST: ${PHOTOGRAPH_HOST:-localhost}
      PHOTOGRAPH_PROTOCOL: ${PHOTOGRAPH_PROTOCOL:-http}
      # Sidekiq Web UI credentials
      SIDEKIQ_USERNAME: ${SIDEKIQ_USERNAME:-admin}
      SIDEKIQ_PASSWORD: ${SIDEKIQ_PASSWORD:-admin_password_change_me}
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - app_tmp:/app/tmp
    networks:
      - photograph_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        bundle exec rails db:prepare &&
        echo 'Database ready, starting application...' &&
        bundle exec puma -C config/puma.rb
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sidekiq Background Jobs
  sidekiq:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: photograph_sidekiq
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD:-secure_password_change_me}@db:5432/photograph_production
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      RAILS_ENV: production
      RACK_ENV: production
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      SIDEKIQ_CONCURRENCY: ${SIDEKIQ_CONCURRENCY:-5}
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - app_tmp:/app/tmp
    networks:
      - photograph_network
    command: bundle exec sidekiq -C config/sidekiq.yml
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: photograph_nginx
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - app_storage:/app/storage:ro
      - nginx_logs:/var/log/nginx
    networks:
      - photograph_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_logs:
    driver: local
  app_tmp:
    driver: local
  nginx_logs:
    driver: local

networks:
  photograph_network:
    driver: bridge