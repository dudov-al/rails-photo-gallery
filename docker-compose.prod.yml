# ===========================================
# Production Docker Compose Configuration
# Optimized for VPS deployment with security hardening
# ===========================================
version: '3.9'

x-rails-env: &rails-env
  DATABASE_URL: postgresql://photograph:${DATABASE_PASSWORD}@db:5432/photograph_production
  REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
  RAILS_ENV: production
  RACK_ENV: production
  SECRET_KEY_BASE: ${SECRET_KEY_BASE}
  RAILS_SERVE_STATIC_FILES: "true"
  RAILS_LOG_TO_STDOUT: "true"
  # Application specific
  PHOTOGRAPH_HOST: ${PHOTOGRAPH_HOST}
  PHOTOGRAPH_PROTOCOL: ${PHOTOGRAPH_PROTOCOL:-https}
  # Performance tuning
  RAILS_MAX_THREADS: ${RAILS_MAX_THREADS:-10}
  WEB_CONCURRENCY: ${WEB_CONCURRENCY:-2}
  MALLOC_ARENA_MAX: "2"
  # Sidekiq credentials
  SIDEKIQ_USERNAME: ${SIDEKIQ_USERNAME}
  SIDEKIQ_PASSWORD: ${SIDEKIQ_PASSWORD}

x-rails-volumes: &rails-volumes
  - app_storage:/app/storage
  - app_logs:/app/log
  - app_tmp:/app/tmp

services:
  # PostgreSQL Database with performance tuning
  db:
    image: postgres:15.4-alpine
    container_name: photograph_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: photograph_production
      POSTGRES_USER: photograph
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: "0.9"
      POSTGRES_WAL_BUFFERS: ${POSTGRES_WAL_BUFFERS:-16MB}
      POSTGRES_DEFAULT_STATISTICS_TARGET: "100"
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - postgres_backups:/backups:Z
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/tune.sql:/docker-entrypoint-initdb.d/02-tune.sql:ro
    networks:
      - photograph_backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photograph -d photograph_production"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    user: postgres

  # Redis with persistence and security
  redis:
    image: redis:7.2-alpine
    container_name: photograph_redis_prod
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data:Z
      - redis_logs:/var/log/redis:Z
    networks:
      - photograph_backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Rails Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: production
    image: photograph:${IMAGE_TAG:-latest}
    container_name: photograph_app_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *rails-env
    volumes:
      <<: *rails-volumes
    networks:
      - photograph_frontend
      - photograph_backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m
      - /app/tmp:noexec,nosuid,nodev,size=100m

  # Sidekiq Background Jobs
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        RAILS_ENV: production
    image: photograph:${IMAGE_TAG:-latest}
    container_name: photograph_sidekiq_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: *rails-env
      SIDEKIQ_CONCURRENCY: ${SIDEKIQ_CONCURRENCY:-10}
      SIDEKIQ_TIMEOUT: ${SIDEKIQ_TIMEOUT:-25}
    volumes:
      <<: *rails-volumes
    networks:
      - photograph_backend
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,nodev,size=100m
      - /app/tmp:noexec,nosuid,nodev,size=100m

  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: photograph_nginx_prod
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro,Z
      - app_storage:/app/storage:ro
      - nginx_logs:/var/log/nginx:Z
      - certbot_webroot:/var/www/certbot:ro
    networks:
      - photograph_frontend
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      - DOMAIN=${PHOTOGRAPH_HOST}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,nodev,size=50m
      - /var/run:noexec,nosuid,nodev,size=10m
      - /tmp:noexec,nosuid,nodev,size=10m

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: photograph_certbot
    depends_on:
      - nginx
    volumes:
      - ./docker/ssl:/etc/letsencrypt:Z
      - certbot_webroot:/var/www/certbot:Z
    environment:
      - DOMAIN=${PHOTOGRAPH_HOST}
      - EMAIL=${ADMIN_EMAIL}
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${PHOTOGRAPH_HOST}
    networks:
      - photograph_frontend

  # Database backup service
  db_backup:
    image: postgres:15.4-alpine
    container_name: photograph_backup
    restart: "no"
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRES_USER: photograph
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: photograph_production
    volumes:
      - postgres_backups:/backups:Z
      - ./docker/scripts/backup.sh:/backup.sh:ro
    networks:
      - photograph_backend
    command: ["/backup.sh"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring with Prometheus Node Exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: photograph_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - photograph_monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  redis_logs:
    driver: local
  app_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/storage
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH}
  app_tmp:
    driver: local
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOG_PATH}/nginx
  certbot_webroot:
    driver: local

# Isolated networks for security
networks:
  photograph_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: photo_frontend
  photograph_backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: photo_backend
  photograph_monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/16
    driver_opts:
      com.docker.network.bridge.name: photo_monitoring